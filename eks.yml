AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template contains the resources for an eks cluster'

Parameters:
  Project:
    Description: The project that this cluster is use for
    Type: String

  Environment:
    Description: The environment (e.g., dev, prod)
    Type: String

  NetworkStackName:
    Description: The name of the network stack
    Type: String

Resources:

#----------------------------------------- eks cluster -------------------------------

  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: '/'
      RoleName: !Sub '${Project}-eks-rol-${Environment}'
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"eks.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'

  IAMRole2:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: '/'
      RoleName: !Sub '${Project}-eks-nodes-rol-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy'
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
        - 'arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy'

  EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Sub '${Project}-eks-cluster-${Environment}'
      RoleArn: !GetAtt IAMRole.Arn
      Version: '1.23'
      ResourcesVpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub "${NetworkStackName}-PublicSubnetA"
          - Fn::ImportValue: !Sub "${NetworkStackName}-PublicSubnetB"
          - Fn::ImportValue: !Sub "${NetworkStackName}-PrivateSubnetA"
          - Fn::ImportValue: !Sub "${NetworkStackName}-PrivateSubnetB"
      # this may need to be remove
      KubernetesNetworkConfig:
        ServiceIpv4Cidr: '10.100.0.0/16'

  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      NodegroupName: !Sub '${Project}-private-nodes-${Environment}'
      ClusterName: !Ref EKSCluster
      Version: '1.23'
      ScalingConfig:
        MinSize: 1
        MaxSize: 10
        DesiredSize: 4
      InstanceTypes:
        - 't3.medium'
      Subnets:
        - Fn::ImportValue: !Sub "${NetworkStackName}-PrivateSubnetA"
        - Fn::ImportValue: !Sub "${NetworkStackName}-PrivateSubnetB"
      NodeRole: !GetAtt IAMRole2.Arn
      Labels:
        role: 'general'
      DiskSize: 20
      Tags: {}
      CapacityType: 'ON_DEMAND'
      RemoteAccess:
        Ec2SshKey: !Sub 'agricola_${Environment}'

    


  # ----------------------------------------- node autoscaler -------------------------------

  IAMManagedPolicy2:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${Project}-autoscaler-pol-${Environment}'
      Path: '/'
      PolicyDocument: '{"Statement":[{"Action":["autoscaling:DescribeAutoScalingGroups","autoscaling:DescribeAutoScalingInstances","autoscaling:DescribeLaunchConfigurations","autoscaling:DescribeTags","autoscaling:SetDesiredCapacity","autoscaling:TerminateInstanceInAutoScalingGroup","ec2:DescribeLaunchTemplateVersions"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}'